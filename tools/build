#!/usr/bin/env bash

log() { printf "%s\n" "$@"; }

invalid() { printf "Invalid option: %s\n" "$*"; }

check_cmd() {
    if ! command -v "$1" >/dev/null; then
        log "Missing $1!"
        case "$1" in
            air) log "Install it with 'go get -u github.com/cosmtrek/air'" ;;
            sassc) log "Install 'sassc' with your package manager" ;;
            pkger) log "Install it with 'go get github.com/markbates/pkger/cmd/pkger'" ;;
            inotify*) log "Install 'notify-tools' with your package manager" ;;
        esac
        return 1
    fi
}

check_dir() {
    pwd="$(pwd)"
    cd "${pwd%/tools}"
}

export_secrets() {
    set -a
    source ./.auth
    set +a
}


sass() {
    log "sass"
    check_cmd sassc
    [ $? = 1 ] && exit
    check_cmd inotifywait
    [ $? = 1 ] && exit

    check_dir
    while inotifywait -r -e close_write scss; do
        sassc --style compressed ./scss/main.scss ./static/main.css
    done
}

prod() {
    log "prod"
    check_cmd sassc
    [ $? = 1 ] && exit
    check_cmd inotifywait
    [ $? = 1 ] && exit
    check_cmd pkger
    [ $? = 1 ] && exit
    check_dir
    export_secrets

    # Include all static files within the executeable
    pkger
    # As we enable CGO we need to have a compile to was compiled for cross-compiling.
    # This specified CC is design to cross-compile against the RPI4 specs.
    CGO_ENABLED=1 CC="/home/gusted/x-tools/aarch64-rpi4-linux-gnu/bin/aarch64-rpi4-linux-gnu-gcc" CGO_CFLAGS="-O3 -g" \
    GOOS=linux GOARCH=arm64 go build \
        -ldflags '-s -w -extldflags "-fno-PIC"' \
        -buildmode pie -tags 'osusergo netgo'
    echo $PASSWORD | ssh $SSHServer 'sudo -S systemctl stop site.service'
    scp ./rpiSite $SSHServer:/home/gusted/site
    echo $PASSWORD | ssh $SSHServer 'sudo -S systemctl start site.service'
}

dev() {
    log "dev"
    check_cmd air
    check_dir
    export_secrets
    rm "./pkged.go"
    env DEBUG="true" \
        DB_DEBUG="${2:-silent}" \
        DB_DROP="${3:-false}" \
        DB_COLOR="true" \
        air
}

drop() {
    log "drop"
    check_cmd air
    env DB_DROP="true" \
        DB_COLOR="true" \
        DB_DEBUG="${2:-silent}" \
        air
}

build() {
    log "build"
    check_dir
    rm "./pkged.go"
    
    CGO_ENABLED=1 CGO_CFLAGS="-O3 -g" \
    GOOS=linux go build \
        -ldflags '-s -w -extldflags "-fno-PIC"' \
        -buildmode pie -tags 'osusergo netgo'
}

case "$1" in
    build) build "$@" ;;
    prod)  prod  "$@" ;;
    sass)  sass  "$@" ;;
    dev)   dev   "$@" ;;
    *) invalid   "$@" ;;
esac
